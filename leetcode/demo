前序遍历

public static void func(TreeNode root){
    if(root == null) return;

    Stack<TreeNode> stack = new Stack();

    TreeNode indexNode = root;

    while(!stack,isEmpty() || indexNode!=null){
        while(indexNode!=null){
            print(indexNode)
            stack.push(indexNode);
            indexNode = indexNode.left;
        }
        if(!stack.isEmpty()){
            indexNode = stack.pop();
            indexNode = indexNode.right;
        }
    }
}

public static void func(TreeNode root){
    if(root == null) return;

    print(root)
    func(root.left)
    func(root.right)
}

中序遍历

public stack void func(TreeNode root){
    if(root == null) return;

    Stack<TreeNode> stack = new Stack();

    TreeNode indexNode = root;

    while(!stack.isEmpty() || indexNode!=null){
        while(indexNode!=null){
            stack.push(indexNode);
            indexNode = indexNode.left;
        }
        if(!stack.isEmpty()){
            indexNode = stack.pop();
            print(indexNode)
            indexNode = indexNode.right;
        }
    }
}

后序遍历

public static void func(TreeNode root){
    if(root == null) return;

    Stack<TreeNode> static = new Stack();

    TreeNode indexNode = root;

    TreeNode lastNode = root;

    while(!stack.isEmpty() || indexNode !=null){
        while(indexNode!=null){
            stack.push(indexNode);
            indexNode = indexNode.left;
        }

        indexNode = stack.peek();

        if(indexNode.right == null || lastNode == indexNode.right){
            print(indexNode)
            stack.pop();
            lastNode = indexNode;
            indexNode = null;
        }else{
            indexNode = indexNode.right;
        }
    }
}

层序遍历

public static void func(TreeNode root){
    if(root == null) return;
    Queue<TreeNode> queue = new LinkedList();

    queue.offer(root);

    while(!queue.isEmpty()){
        TreeNode node = queue.poll();
        print(node);
        if(node.left!=null) 
            queue.offer(node.left);
        if(node.right!=null) 
            queue.offer(node.right);
    }
}

深度优先遍历

public static void func(TreeNode root){
    if(root == null) return;
    Stack<TreeNode> stack = new Stack();

    stack.push(root);

    while(!stack.isEmpty()){
        TreeNode node = stack.pop();
        print(node);
        if(node.left!=null) 
            queue.push(node.left);
        if(node.right!=null) 
            queue.push(node.right);
    }
}


///////////////////////////////////////////

快排

public static void func(int[] arr,int left, int right){
    if(left>right) return;

    int pivok = getPivok(arr,left,right);
    func(arr,left,pivok -1);
    func(arr,pivok+1,right);
}

public static int getPivok(int[] arr ,int left, int right){
    int value = arr[left];
    int i = left;
    int j = right;

    while(i<j){
        while(i<j && value>=arr[i])
            i++;
        while(i<j && value <= arr[j])
            j--;

        swap(arr,i,j)
    }
    swap(arr,left,i);

    return i;
}

归并

public static void func(int[] arr,int left, int right){
    if(left > right) return;

    int mid = (left+right)/2;

    func(arr,left,mid);
    func(arr,mid+1,right);

    merge(arr,left,mid,right);
}

public static void merge(int[] arr, int left,int mid, int right){
    int[] temp = new int[right-left+1];

    int i = left;
    int j = mid+1;
    int t = 0;

    while(i<=mid && j<=right){
        temp[t++] = arr[i]>arr[j]?arr[j++]:arr[i++];
    }

    while(i<=mid){
        temp[t++] = arr[i++];
    }

    while(j<=right){
        temp[t++] arr[j++];
    }

    t = 0;


    while(left<=right){
        arr[left++] = arr[t++];
    }

}






